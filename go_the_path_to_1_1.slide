The Path to Go 1.1
language, stdlib, tools, and performance
19:00 28 Mar 2013
Tags: go1.1, go

Jesse Szwedko
Software Engineer, ModCloth
j.szwedko@modcloth.com
@jesse_szwedko

Sheena McCoy
Software Engineer, ModCloth
sp.mccoy@modcloth.com
@sheenapmccoy

* The Path to Go 1.1

- Language Changes
- Standard Library Changes
- Tool Chain Changes
- Backwards "Incompatible" Changes
- Performance

* Language Changes

* Method Value

Functions that have been bound to a specific receiver value

	func (w io.Writer) Write(p []byte) (n int, err error)

.play methods_simple.go /START OMIT/,/END OMIT/

Useful for passing struct methods to APIs requiring a callback.
E.g. http.ServeMux.ServeHTTP

  func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))

Previously this would require wrapping in an anonymous function.

* Method Value
.play methods.go /START OMIT/,/END OMIT/

* Return Requirements
Functions ending in [[http://tip.golang.org/ref/spec#Terminating_statements][terminating statements]] no longer require a panic() or return

.play returns.go /START OMIT/,/END OMIT/

You can use `go vet` to find unreachable code

* Other Language Changes

Integer division by zero

- Now a compile time error

.play zero.go /START OMIT/,/END OMIT/

Surrogate halves in Unicode (UTF-16) literals

- Unicode constants with half surrogates are compile time errors
- When encoded as UTF-8 bytes, results in uft8.RuneError when decoding characters

.play surrogates.go /START OMIT/,/END OMIT/

* Standard Library Changes

* reflect.MakeFunc
    func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value

Execution of generated function

- converts its arguments to a list of Values args.
- runs results := fn(args).
- returns the results as a slice of Values, one per formal result.

Allows for implementation of pseudo-generic functions.

* reflect.MakeFunc
.play reflect.go /START OMIT/,/END OMIT/

* reflect.Select
Allows for dymanic generation of [[http://tour.golang.org/#66][select]] statements

    const (
            _               SelectDir = iota
            SelectSend              // case Chan <- Send
            SelectRecv              // case <-Chan:
            SelectDefault           // default
    )

    type SelectCase struct {
        Dir  SelectDir // direction of case
        Chan Value     // channel to use (for send or receive)
        Send Value     // value to send (for send)
    }

    func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)

* Muxing Select Go 1
.play pre-select.go /START OMIT/,/END OMIT/

* Muxing Select Go 1.1 (reflect.Select)
.play post-select.go /START OMIT/,/END OMIT/

* Muxing in Newsqueak
.code newsqueak-select.ns

Maybe someday.

[[http://www.youtube.com/watch?v=hB05UFqOtFA][CSP in Newsqueak]]

* 
.iframe http://tip.golang.org/doc/go1.1#minor_library_changes 600 1000

* Tool Chain Changes
go build

- Has more detailed error messages, including paths searched for missing packages

go get

- $GOPATH requirement
- $GOPATH != $GOROOT

go test

- Leaves binaries while profiling
- Can generate profiling information about when/where go routines are blocked with -blockprofile

go fix

- Only updates 1.0 -> 1.1 code. Use go 1.0 tool chain to update pre-1.0 -> 1.0

* Backwards "Incompatible" Changes
- Ints are now 64-bit on 64-bit platforms
- UTF-16 surrogate half values are correctly considered illegal
- Assembly functions need to be revised to adjust frame pointer offsets (use go vet)
- Division by constant 0 is a compile-time error instead of runtime
- [[http://golang.org/pkg/net/][net]] package structs now have a Zone field which breaks untagged struct literals (use go fix)
- [[http://golang.org/pkg/time/][time]] package now returns nanosecond precision
- GC tool chain now uses same command-line flag parsing rules as [[http://golang.org/pkg/flag/][flag]] package
- [[http://golang.org/doc/go1compat.html][Go Compatibility]] 

* Performance
Typical improvements relative to Go 1.0 seem to be about 30%-40%

- gc compiler improvements including more in-lining (including append and interface conversions)
- Re-implementation of Go maps as hashtable with buckets
- Garbage collector is more precise at the expense of CPU, but also more parallel
- Improved network performance due to tighter coupling of run-time and network libraries (fewer context switches)

* Current State of 1.1 Release
.link http://blog.golang.org/2013/03/the-path-to-go-1.html "in the coming weeks."
.iframe http://swtch.com/~rsc/go11.html 500 1000
